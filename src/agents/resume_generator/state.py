from __future__ import annotations

import operator
from pathlib import Path
from typing import Annotated, TypedDict

from pydantic import BaseModel, Field

from src.db.models import CandidateResponse, Certification, Education, Experience, User
from src.features.resume.types import ResumeData


# Reducers
def merge_dicts(left: dict, right: dict) -> dict:
    """Shallow-merge two dictionaries for reducer semantics."""
    return {**left, **right}


class InputState(BaseModel):
    """Inputs required to run the resume generator agent."""

    job_title: str
    job_description: str
    resume_page_target: float = 1.0
    feedback_loop_max_iterations: int = 4


class OutputState(BaseModel):
    """Outputs produced by the resume generator agent."""

    resume: ResumeData | None = None
    resume_path: Path | None = None


class InternalState(InputState, OutputState, BaseModel):
    """Full working state for the resume generator agent.

    Combines input, output, and intermediate fields read/returned by nodes.
    """

    # Populated by Read DB Content
    user: User | None = None
    education: list[Education] = []
    credentials: list[Certification] = []
    experience: dict[int, Experience] = {}
    candidate_responses: list[CandidateResponse] = []

    # Map edge context
    current_experience_id: int | None = None

    # Generated by Extract Skills and Accomplishments
    skills_and_accomplishments: Annotated[
        dict[int, SkillsAndAccomplishments],
        merge_dicts,
    ] = {}

    # Generated by Summarize Experience
    experience_summary: Annotated[dict[int, str], merge_dicts] = {}

    # Generated by Summarize Responses
    responses_summary: str | None = None

    # Generated by Create Professional Summary
    professional_summary: str | None = None

    # Generated by Generate Resume PDF
    resume_page_length: float | None = None

    # Generated by Select Resume Content
    word_count: int | None = None

    # Generated by Provide Resume Feedback
    resume_feedback: str | None = None
    feedback_loop_iterations: Annotated[int, operator.add] = 0


class SkillsAndAccomplishments(BaseModel):
    """Aggregated skills and accomplishments extracted per experience.

    Mirrors the structure described in the agent README.
    """

    experience_id: int = Field(..., description="The related experience identifier")
    accomplishments: list[str] = Field(default_factory=list)
    skills: list[str] = Field(default_factory=list)


class PartialInternalState(TypedDict, total=False):
    """Partial updates to the internal state passed between nodes."""

    # Input fields may appear in partial updates
    job_title: str
    job_description: str
    resume_page_target: float
    feedback_loop_max_iterations: int

    # Output fields may be set incrementally
    resume: ResumeData | None
    resume_path: Path | None

    # DB-derived content
    user: User | None
    education: list[Education]
    credentials: list[Certification]
    experience: dict[int, Experience]
    candidate_responses: list[CandidateResponse]

    # Map edge context
    current_experience_id: int | None

    # Generated content
    skills_and_accomplishments: dict[int, SkillsAndAccomplishments]
    experience_summary: dict[int, str]
    responses_summary: str | None
    professional_summary: str | None
    resume_page_length: float | None
    word_count: int | None
    resume_feedback: str | None
    feedback_loop_iterations: int
