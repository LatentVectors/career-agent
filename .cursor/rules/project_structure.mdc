---
description: An overview of the projects purpose and structure. Use this to identify the correct location for code when looking things up or adding new code outside of the current file.
alwaysApply: false
---
# Project Overview
This project defines a helpful AI agent for generating career-related documents for a job seeker.

# Project Structure

Below is a high-level map of the repository and the intended purpose of every major directory / module.  When adding new code please follow these conventions so that future contributors can navigate the project predictably.

## Top-level directories

| Path | Purpose |
|------|---------|
| `src/` | Core application library – contains the main agent, supporting utilities, and reusable sub-agents.  **All importable Python code lives here.** |
| `data/` | User-specific content (raw job descriptions, background files, VCR cassettes, etc.).  Kept out of version control. |
| `evals/` | Offline evaluation harness built on LangGraph.  Contains datasets and experiment definitions. |
| `test/` | Pytest suite covering parsing logic, storage helpers, and critical nodes. |

---

## Core application layout – `src/`
This section maps the actual `src/` structure to responsibilities so contributors know where to place code:

- `agents/main/` – The primary orchestrator agent that runs the end-to-end workflow.
  - `graph.py` – Builds the LangGraph `StateGraph`, wires nodes/edges, and exposes the compiled graph API.
  - `state.py` – TypedDict schemas for input, working, and output state for the main agent.
  - `nodes/` – Stateless node functions; one node per file. Key nodes include:
    - `job_requirements.py` – extract requirements from the job description
    - `wrapped_experience_agent.py` / `wrapped_responses_agent.py` – adapters that call sub-agents and merge results
    - `write_cover_letter.py` and `write_resume.py` – assemble final documents
    - `get_feedback.py` – human-in-the-loop routing
    - `tool_node.py` – generic utility node
  - New nodes should be exported via `nodes/__init__.py` for easy imports.

- `agents/` – Self-contained sub-agents used by the main agent or standalone:
  - `experience_summarizer/`, `responses_summarizer/`, `resume_generator/` (each with its own `graph.py`, `state.py`, and `nodes/`). See the Sub-agents section below for conventions.

- `core/` – Cross-cutting runtime building blocks:
  - `callbacks.py` – Custom LangChain/LangGraph callbacks
  - `context.py` – Execution/runtime context helpers
  - `hitl.py` – Human-in-the-loop dispatch and handlers
  - `models.py` – Model names, configuration, and `get_model()` helpers
  - `tools.py` – External tool wrappers callable from nodes

- `db/` – Persistence layer:
  - `models.py` – SQLAlchemy model definitions
  - `database.py` – Engine/session management
  - `cli_crud.py` – CLI for CRUD operations
  - `cli_io.py` – Import/export helpers

- `features/` – Feature-specific modules:
  - `resume/` – Resume generation and management
    - `data_adapter.py` – Reads/converts DB or file content for resume generation
    - `content.py` – Core resume content composition
    - `prompt.py` – Prompt fragments and templates
    - `types.py` – Types and schemas
    - `utils.py` – Utilities for resume assembly
    - `cli.py` – Feature-specific CLI commands
    - `templates/` – HTML resume templates

- `schemas/` – Project-wide data schemas shared across modules.
- `cli.py` – Typer entry-points (e.g., `graph`, `chat`, `save_job`).
- `config.py` – Static configuration and environment toggles.
- `logging_config.py` – Project-wide logger configuration.
- `utils.py` – Small generic helpers. Promote code to dedicated modules when it grows.

---

## Sub-agents – `src/agents/{agent_name}`
Sub-agents are **self-contained LangGraph graphs** that solve a single sub-task (e.g. summarizing experience or responses).  They follow the exact same mini-structure so they can be plugged into the main agent or used standalone:

```
src/agents/my_agent/
├── __init__.py          # Re-exports graph for `from ... import my_agent`
├── graph.py             # Builds/compiles the StateGraph and exposes `graph` or `my_agent`
├── state.py             # TypedDict schemas for the sub-agent state
└── nodes/
    ├── __init__.py      # Imports the node functions for graph.py
    ├── step_one.py      # One node per file (stateless, pure)
    └── step_two.py
```

The `nodes/__init__.py` file should export all of the nodes in the directory as part of `__all__`.

The sub-agents `__init__.py` file should export the compiled agent graph and the public API via the Input and Output states from the `states.py` file.

---

# Additional Rules
- If you notice the project structure has changed from this specification please notify me.
